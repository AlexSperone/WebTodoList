@inject HttpClient HttpClient

<div class="col-md-12">
    @if (Items == null)
    {
        <div class="alert alert-info">
            <p>Nothing to do :)</p>
        </div>
    }
    else
    {
        <div class="custom-control custom-switch">
            <input @onchange="ToggleCompletedItems" type="checkbox" class="custom-control-input" id="hideTaskIfDone">
            <label class="custom-control-label" for="hideTaskIfDone">Hide completed task</label>
        </div>
        <hr />
        <div class="list-group">
            @foreach (var item in Items)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <input @onclick="() => MarkTodoItemAsDone(item)" class="form-check-input" type="checkbox" checked="@item.IsDone" disabled="@item.IsDone" id="@($"{item.Id}-is-done")">
                    <label class="form-check-label" for="@($"{item.Id}-is-done")" style="@(item.IsDone ? "text-decoration: line-through;" : "")">
                        @item.Text
                    </label>
                    <button @onclick="() => DeleteTodoItem(item)" type="button" class="btn btn-outline-danger" title="Delete this item">
                        <span class="oi oi-trash"></span>
                        <span class="sr-only">Delete</span>
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public IEnumerable<ListItemViewModel> Items { get; set; }

    [Parameter]
    public EventCallback<ListItemViewModel> OnTodoItemMarkedAsDone { get; set; }

    [Parameter]
    public EventCallback<ListItemViewModel> OnTodoItemDeleted { get; set; }

    [Parameter]
    public EventCallback<bool> OnToggleCompletedItems { get; set; }

    private bool hideCompletedTask = false;

    async Task MarkTodoItemAsDone(ListItemViewModel item)
    {
        await HttpClient.PatchAsync($"api/todo/{item.Id}/done", null);
        await OnTodoItemMarkedAsDone.InvokeAsync(item);
    }

    async Task DeleteTodoItem(ListItemViewModel item)
    {
        await HttpClient.DeleteAsync($"api/todo/{item.Id}");
        await OnTodoItemDeleted.InvokeAsync(item);
    }

    async Task ToggleCompletedItems()
    {
        hideCompletedTask = !hideCompletedTask;
        await OnToggleCompletedItems.InvokeAsync(hideCompletedTask);
    }
}
